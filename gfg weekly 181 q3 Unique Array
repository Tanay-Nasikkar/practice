class Solution:

    def uniqueArray(self, n, ar):
        #Two-pass approach
        mp = {}
        #Here, ans = length of longest unique subarray that can be generated by removing one or no subarray
        ans = 0
        id_ = -1

        for i,v in enumerate(ar):
            if v in mp:
                break
            mp[v] = i
        
        id_ = i-1
        ans = i

        for i in range(n - 1, -1, -1):
            if ar[i] not in mp:
                mp[ar[i]] = i
            elif mp[ar[i]] <= i:
                idx = mp[ar[i]]
                while id_ >= idx:
                    del mp[ar[id_]]
                    id_ -= 1
                mp[ar[i]] = i
            else:
                break

            ans = max(ans, id_ + 1 + (n - i))

        return n - ans


#{ 
 # Driver Code Starts
class IntArray:

    def __init__(self) -> None:
        pass

    def Input(self, n):
        arr = [int(i) for i in input().strip().split()]  #array input
        return arr

    def Print(self, arr):
        for i in arr:
            print(i, end=" ")
        print()


if __name__ == "__main__":
    t = int(input())
    for _ in range(t):

        n = int(input())

        arr = IntArray().Input(n)

        obj = Solution()
        res = obj.uniqueArray(n, arr)

        print(res)
        print("~")

# } Driver Code Ends
